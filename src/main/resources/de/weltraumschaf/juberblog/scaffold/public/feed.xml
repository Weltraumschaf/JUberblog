<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  version="2.0"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Das Weltraumschaf</title>
    <link>http://uberblog.local/feed.xml</link>
    <description>The Music Making Space Animal</description>
    <language>en</language>
    <lastBuildDate>Sat, 07 Apr 2012 00:16:23 +0200</lastBuildDate>
    <item>
      <title>Uberblog 1.0</title>
      <link>http://uberblog.local/posts/uberblog-1-0.html</link>
      <description>&lt;h2 id=&quot;uberblog-10&quot;&gt;Uberblog 1.0&lt;/h2&gt;

&lt;p&gt;Two weeks ago I &lt;a href=&quot;https://blog.weltraumschaf.de/posts/fuck-of-wordpress.html&quot;&gt;anounced&lt;/a&gt; that I&amp;rsquo;ll no longer use Wordpress but a more simple self programmed solution. Now I&amp;rsquo;m at the point that I can say: I&amp;rsquo;ve a version with all features I need. The version 1.0.&lt;/p&gt;

&lt;p&gt;Why did I choose this way? As described in my former post I&amp;rsquo;ve used Wordress quite a long time. And I don&amp;rsquo;t want to rant too much about Wordpress, PHP and the whole universe. But I thought about some fundamental things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Why should I pick documents into pieces so that I can store them in a heavy relational database monster? The whole Wordpress database from over the last five years never allocated more than roundabout eight mega bytes in MySQL.&lt;/li&gt;
  &lt;li&gt;Why should I put this pieces of content dynamically together on each page request? The content in most cases do not change. Sometimes a typo is fixed. But all this work only for comment functionality? I have not that much comments on my blog.&lt;/li&gt;
  &lt;li&gt;Why should I do 1. and 2. and then storing the result into a rendered HTML cache file to improve the performance?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reaching point three I asked my self: Why not creating the HTML websites periodically and skip all three steps? For me it was the price worth to do not have any &amp;ldquo;social&amp;rdquo; functionality like rating or comments in the first step.&lt;/p&gt;

&lt;h3 id=&quot;so-wheres-the-meat&quot;&gt;So, where&amp;rsquo;s the meat?&lt;/h3&gt;

&lt;p&gt;What is my architecture? It is not a full blown LAMP stack. There is no database. The content is stored in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; files inside the blog repository. From this files a periodically executed script generates the static HTML content which is simply served as static file via Apache. That sounds very simple, indeed. But there are some additions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there is a create script which creates blog post files as a template&lt;/li&gt;
  &lt;li&gt;new blog posts are updated to twitter&lt;/li&gt;
  &lt;li&gt;it&amp;rsquo;s possible to create additional sites, not included in the blog posts list&lt;/li&gt;
  &lt;li&gt;atom feed XML and site map XML generation&lt;/li&gt;
  &lt;li&gt;draft mode for posts and sites&lt;/li&gt;
  &lt;li&gt;pagination between posts (previous/next)&lt;/li&gt;
  &lt;li&gt;versions of the markdown content I got for free by Git&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;and-the-social-stuff&quot;&gt;And the social stuff?&lt;/h3&gt;

&lt;p&gt;I mentioned above that I accepted that I will not have ratings or comments in my blog solution. Also I mentioned there is no database. That&amp;rsquo;s both not one hundred percent true. There is an implementation for ratings and comments will come soon.&lt;/p&gt;

&lt;p&gt;The implementation of the rating feature is completely decoupled from the blog. I implemented a simple REST API with &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; which can handle ratings for something with an id. This data is stored via &lt;a href=&quot;http://datamapper.org/&quot;&gt;DataMapper&lt;/a&gt; into a &lt;a href=&quot;http://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt; database. The glue between this REST server and the blog content are a few lines JavaScript and some jQuery plugins. After the blog post loaded the JavaScript asks the REST API for rating data and displays the rater. On clicking it the JavaScript updates the data on the REST API. The reference between the rating data and the blog post is done by the URI of a blog post. Which is by default unique.&lt;/p&gt;

</description>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0200</pubDate>
      <dc:date>2012-04-01T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Chrome Dev Tools Reloaded</title>
      <link>http://uberblog.local/posts/chrome-dev-tools-reloaded.html</link>
      <description>&lt;h2 id=&quot;chrome-dev-tools-reloaded&quot;&gt;Chrome Dev Tools Reloaded&lt;/h2&gt;

&lt;p&gt;Are you using &lt;a href=&quot;http://getfirebug.com/&quot;&gt;Firebug&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en/Venkman&quot;&gt;Venkman&lt;/a&gt;? Did you ever tried the Chrome developer tools? If your answers were yes and no you should watch this video from Google IO 2011 about the Chrome developer tools:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/N8SS-rUEZPg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If your answers were no and no you should consider watching the video, too. And you should think about better ways than sprinkling &lt;kbd&gt;alert()&lt;/kbd&gt; all over you&amp;rsquo;re code and forget them there for the joy of the user. &lt;/p&gt;

&lt;p&gt;The CSS3 patterns mentioned in the video you can find &lt;a href=&quot;http://lea.verou.me/css3patterns/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0200</pubDate>
      <dc:date>2012-04-01T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Keynes vs. Hayek</title>
      <link>http://uberblog.local/posts/keynes-vs-hayek.html</link>
      <description>&lt;h2 id=&quot;keynes-vs-hayek&quot;&gt;Keynes vs. Hayek&lt;/h2&gt;

&lt;p&gt;If you ever wondered what this &lt;a href=&quot;http://en.wikipedia.org/wiki/John_Maynard_Keynes&quot;&gt;Keynes&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Friedrich_Hayek&quot;&gt;Hayek&lt;/a&gt; thing is, a lot of economists talking about. Here are two excelent videos telling about.&lt;/p&gt;

&lt;h3 id=&quot;fear-the-boom-and-bust-a-hayek-vs-keynes-rap-anthem&quot;&gt;&amp;ldquo;Fear the Boom and Bust&amp;rdquo; a Hayek vs. Keynes Rap Anthem&lt;/h3&gt;

&lt;p&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/d0nERTFo-Sk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3 id=&quot;fight-of-the-century-keynes-vs-hayek-round-two&quot;&gt;Fight of the Century: Keynes vs. Hayek Round Two&lt;/h3&gt;

&lt;p&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/GTQnarzmTOc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <pubDate>Sun, 25 Mar 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-03-25T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Debian and the outdated Ruby Gems</title>
      <link>http://uberblog.local/posts/debian-and-the-outdated-ruby-gems.html</link>
      <description>&lt;h2 id=&quot;debian-and-the-outdated-ruby-gems&quot;&gt;Debian and the outdated Ruby Gems&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.debian.org/&quot;&gt;Debian&lt;/a&gt; is in my personal opinion the best Linux server distribution ever! I&amp;rsquo;ve never used something else. But one big drawback is that a lot of stuff is really outdated: With PHP you have to use backports. Java and Maven brings some hassle, too. And now I realized the same problem with Ruby Gems. But there is a solution as described &lt;a href=&quot;http://www.beier-christian.eu/blog/weblog/ruby-gem-update-is-disabled-on-debian/&quot;&gt;here&lt;/a&gt; (german blog post).&lt;/p&gt;

&lt;p&gt;By default Debian disables the &lt;kbd&gt;gem update &amp;ndash;system&lt;/kbd&gt; to prevent circumventing the Debian packet management system. If you need a newer Gem version you can install the &lt;a href=&quot;http://rubygems.org/gems/rubygems-update&quot;&gt;rubygems-update&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install rubygems-update --version=1.8.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the &amp;ndash;version option you can chose your preferred version. After installation you need to invoke the update command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo update_rubygems
&lt;/code&gt;&lt;/pre&gt;

</description>
      <pubDate>Fri, 23 Mar 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-03-23T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Post to Twitter with Ruby</title>
      <link>http://uberblog.local/posts/post-to-twitter-with-ruby.html</link>
      <description>&lt;h2 id=&quot;post-to-twitter-with-ruby&quot;&gt;Post to Twitter with Ruby&lt;/h2&gt;

&lt;p&gt;Just few hours ago I added the feature that new blog posts are posted to my &lt;a href=&quot;https://twitter.com/Weltraumschaf/&quot;&gt;Twitter account&lt;/a&gt;. With the &lt;a href=&quot;http://twitter.rubyforge.org/&quot;&gt;twitter gem&lt;/a&gt; only a few lines of code necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'twitter'

twitter = Twitter.new({
  :consumer_key       =&amp;gt; 'YOUR_CONSUMER_KEY',
  :consumer_secret    =&amp;gt; 'YOUR_CONSUMER_SECRET',
  :oauth_token        =&amp;gt; 'YOUR_OAUTH_TOKEN',
  :oauth_token_secret =&amp;gt; 'YOUR_OAUTH_TOKEN_SECRET'
})
twitter.update('Hello world!')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shorten URIs with &lt;a href=&quot;https://github.com/philnash/bitly&quot;&gt;bitly gem&lt;/a&gt; is as simple as posting to twitter, too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'bitly'

Bitly.use_api_version_3
bitly = Bitly.new('YOUR_USERNAME', 'YOUR_API_KEY')
short_url = bitly.shorten(longUrl).short_url
&lt;/code&gt;&lt;/pre&gt;

</description>
      <pubDate>Fri, 23 Mar 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-03-23T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Hudson vs. Jenkins</title>
      <link>http://uberblog.local/posts/hudson-vs-jenkins.html</link>
      <description>&lt;h2 id=&quot;hudson-vs-jenkins&quot;&gt;Hudson vs. Jenkins&lt;/h2&gt;

&lt;p&gt;Do you remember &lt;a href=&quot;http://hudson-ci.org/&quot;&gt;Hudson CI&lt;/a&gt;? If you did some &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;CI&lt;/a&gt; two years ago then you know Hudson and you also know that after the acquisition of Sun by Oracle there was hassle in the comunity. End of story was that the lead developer &lt;a href=&quot;http://kohsuke.org/&quot;&gt;Khosuke&lt;/a&gt; and some of his fellows spinned of the &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; project. That&amp;rsquo;s the short version. For the longer one ask the search engine of your choice. &lt;/p&gt;

&lt;p&gt;But one import issue for newbies to CI is the question: Which project should we use? If you see the numbers the answer is quite clear:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Measurement Metric&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Jenkins&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Hudson&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User upgrades	since March 2011&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;85%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User upgrades since March 2011&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2300&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;300&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Average # of commits in plugins/week&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;280&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GitHub repositories&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;603&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GitHub watchers&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;833&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;135&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GitHub members&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;117&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User + Dev mailing list traffic/week&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1295&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dev list subscribers&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1150&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;508&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dev list growth since March 2011&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+41%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-7%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User list subscribers&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2084&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;800&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;User list growth since March 2011&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;+62%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-8%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Twitter followers&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4826&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;593&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The numbers are from this &lt;a href=&quot;http://www.cloudbees.com/sites/default/files/whitepapers/Jenkins_Safe_Investment_Final.pdf&quot;&gt;PDF&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Wed, 21 Mar 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-03-21T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Nice Resources For Learning Ruby</title>
      <link>http://uberblog.local/posts/nice-resources-for-learning-ruby.html</link>
      <description>&lt;h2 id=&quot;nice-resources-for-learning-ruby&quot;&gt;Nice Resources For Learning Ruby&lt;/h2&gt;

&lt;p&gt;If you ever wanted to start learing Ruby the big question to answer is:
Where to star? I recommend &lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/&quot;&gt;Learning Ruby&lt;/a&gt; from the &lt;a href=&quot;http://pragprog.com/&quot;&gt;Pragmatic Programmers&lt;/a&gt;.
Documntation for the &lt;a href=&quot;http://www.ruby-doc.org/core-1.9.3/&quot;&gt;Core&lt;/a&gt; and the &lt;a href=&quot;http://www.ruby-doc.org/stdlib-1.9.3/&quot;&gt;Standard Library&lt;/a&gt; is available, too.
Always a good place to find answers is &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Mon, 19 Mar 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-03-19T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Fuck Of Wordpress</title>
      <link>http://uberblog.local/posts/fuck-of-wordpress.html</link>
      <description>&lt;h2 id=&quot;fuck-of-wordpress&quot;&gt;Fuck Of Wordpress&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://wordpress.org/&quot;&gt;Wordpress&lt;/a&gt; was my first blog software. I used it since roundabout six years
now. Writing an own plugin for my blog was one of my first steps learning
&lt;a href=&quot;http://php.net/&quot;&gt;PHP&lt;/a&gt;. After my experiences with Java 1.4 and MS Visual C++ 6.0 from
2002 until 2005 I came over to the web scripting area and got in touch with
PHP. The new OOP features and the short round trip time I liked.&lt;/p&gt;

&lt;p&gt;But nowadays I realize that Wordpress is extremely slow. I tried several tricks
and tweaks to reduce the response time. But it was impossible to go under one
second without jumping through hoops. I thought about the whole setup: Why should
my blog render the whole stuff on each request? And the current version of Wordpress
has a lot bloated stuff to do on each request. So I checked my requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I blog not that often&lt;/li&gt;
  &lt;li&gt;I only update typos&lt;/li&gt;
  &lt;li&gt;I don&amp;rsquo;t need WYSIWYG, editing &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; files is comfortable enough&lt;/li&gt;
  &lt;li&gt;I do not really need a comment feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I decided to use something way more simple than the known bloated full
featured PHP blogs out in the wild: I&amp;rsquo;ve written a view lines of Ruby code
which generates static HTML files from Markdown files. Each Markdown file
is one blog post. Added some HTML and CSS and all of that stored into a
&lt;a href=&quot;https://github.com/Weltraumschaf/uberblog&quot;&gt;GitHub Repo&lt;/a&gt;. On the server side there are only static files served,
a crontab job pulls each hour the Git repo and runs the publish script
which generates the static content. Voila, here it is my ultra fast uberblog!&lt;/p&gt;

</description>
      <pubDate>Sun, 18 Mar 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-03-18T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>All Web Developers Should Stop Doing This Immediately, Too</title>
      <link>http://uberblog.local/posts/all-web-developers-should-stop-doing-this-immediately-too.html</link>
      <description>&lt;h2 id=&quot;all-web-developers-should-stop-doing-this-immediately-too&quot;&gt;All Web Developers Should Stop Doing This Immediately, Too&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.technologyreview.com/blog/mimssbits/27581/?nlid=nldly&amp;amp;nld=2012-02-16&quot;&gt;Christopher Mims complains about the fact that a website is treating him with his iPad as a second class citicen&lt;/a&gt;. He’s right that web developers shouldn’t do that. But he’s arguing that he don’t want to download the offered iPad-App because in his opion this is antisocial doing that on a low bandwith public wifi. Is it better to watch a video over that low bandwith public wifi?&lt;/p&gt;

&lt;p&gt;And more important: I wanted to give him this feedback on his blog. But I have to register to do that. Hey Chris, don’t bother me with this stupid registration stuff. I don’t wanna register on technologyreview.com to leave one comment. You’re patronizing me in the same way ;)&lt;/p&gt;

</description>
      <pubDate>Thu, 16 Feb 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-02-16T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Maven And Arbitrary Jar Files</title>
      <link>http://uberblog.local/posts/maven-and-arbitrary-jar-files.html</link>
      <description>&lt;h2 id=&quot;maven-and-arbitrary-jar-files&quot;&gt;Maven And Arbitrary Jar Files&lt;/h2&gt;

&lt;p&gt;Since I’m coding sometimes with Java I also use &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; to manage dependencies. It is a very easy and straight forward approach to use Maven. Also very nice that &lt;a href=&quot;http://netbeans.org/&quot;&gt;Netbeans&lt;/a&gt; just opens a POM file. No need to configure a project or such.&lt;/p&gt;

&lt;p&gt;But now I was confronted with the need to include a library which is only available as stand alone jar file. The solution is to install the jar file into your local Maven repository as described &lt;a href=&quot;http://www.zparacha.com/include-externaljar-file-in-maven/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Wed, 04 Jan 2012 00:00:00 +0100</pubDate>
      <dc:date>2012-01-04T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Only SSL access to my blog</title>
      <link>http://uberblog.local/posts/only-ssl-access-to-my-blog.html</link>
      <description>&lt;h2 id=&quot;only-ssl-access-to-my-blog&quot;&gt;Only SSL access to my blog&lt;/h2&gt;

&lt;p&gt;Some time ago I configured my blog to serve both HTTP and HTTPS. From now on I will redirect all non-SSL requests permanently to HTTPS. The reason is that no one access the login page without SSL by accident. If you encounter any problems please let me know.&lt;/p&gt;

&lt;p&gt;Unless you have installed the &lt;a href=&quot;http://www.cacert.org/&quot;&gt;CAcert&lt;/a&gt; root certificates in your browser, you will become a warning about my server’s certificate. To prevent this install the root certificates from &lt;a href=&quot;http://www.cacert.org/index.php?id=3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Fri, 30 Dec 2011 00:00:00 +0100</pubDate>
      <dc:date>2011-12-30T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Plugins To Harden Your WordPress</title>
      <link>http://uberblog.local/posts/plugins-to-harden-your-wordpress.html</link>
      <description>&lt;h2 id=&quot;plugins-to-harden-your-wordpress&quot;&gt;Plugins To Harden Your WordPress&lt;/h2&gt;

&lt;p&gt;Just stumbled over a blog post with a collection of &lt;a href=&quot;http://tutzone.org/2009/08/16-updated-wordpress-security-plugins.html&quot;&gt;16 WordPress plugins&lt;/a&gt; to secure your blog installation. Some of them sounds not that strong but some of them sounds interesting. I’ll checkout some of them an maybe report about them, if they are worth mentioning it.&lt;/p&gt;

</description>
      <pubDate>Wed, 28 Dec 2011 00:00:00 +0100</pubDate>
      <dc:date>2011-12-28T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Writing Compilers and Interpreters: A Software Engineering Approach</title>
      <link>http://uberblog.local/posts/writing-compilers-and-interpreters-a-software-engineering-approach.html</link>
      <description>&lt;h2 id=&quot;writing-compilers-and-interpreters-a-software-engineering-approach&quot;&gt;Writing Compilers and Interpreters: A Software Engineering Approach&lt;/h2&gt;

&lt;p&gt;I have bought a &lt;a href=&quot;http://www.amazon.de/Writing-Compilers-Interpreters-Software-Engineering/dp/0470177071&quot;&gt;Book&lt;/a&gt; from &lt;a href=&quot;http://www.apropos-logic.com/&quot;&gt;Ronald Mak&lt;/a&gt; about how to write compilers and interpreters. Interesting approach is the software design view: How to specify and implement the modules/components language independent as possible. This book is a good extension to the book &lt;a href=&quot;http://pragprog.com/book/tpdsl/language-implementation-patterns&quot;&gt;Language Implementation Patterns&lt;/a&gt; from Terence Parr. The code I produce during my lessons you can see on &lt;a href=&quot;https://github.com/Weltraumschaf/cay-the&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Wed, 28 Dec 2011 00:00:00 +0100</pubDate>
      <dc:date>2011-12-28T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Parser and Image Generator for EBNF</title>
      <link>http://uberblog.local/posts/parser-and-image-generator-for-ebnf.html</link>
      <description>&lt;h2 id=&quot;parser-and-image-generator-for-ebnf&quot;&gt;Parser and Image Generator for EBNF&lt;/h2&gt;

&lt;p&gt;Some days ago I searched for a tool which can visualizes &lt;a href=&quot;http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form&quot;&gt;EBNF&lt;/a&gt; grammars. I don’t care what kind of visualization: Desktop tool or a command line tool which generates images, PDF or such. The only tool I found was a Windows tool. That didn’t satisfy me because I don’t want to start my VM each time for only checking my grammar visually. But I found some moldy PHP code from Vincent Tscherter &lt;a href=&quot;http://karmin.ch/ebnf/index&quot;&gt;here&lt;/a&gt; which generates PNG or XML files from an EBNF grammar. That’s what I wanted: A visual of a grammar. But his implementation has some weakness: It does not support the whole feature set of EBNF (concatenation, comment, special sequence and exceptions) and more important, the error reporting sucks. If you have a syntax error the lexer/parser function reports the position of the error as an index in the input stream. No line! No column! It’s quite hard to go through a large grammar file to find character 10934 where the syntax error is. The original implementation does not have the possibility to extend it in an easy way to track the line number of a scanned lexical token. Not to mention the column. So I decided to port the whole code to PHP 5.3 and refactor it to standard LL(1) Recursive-Descent Lexer/Parser pattern. (For more information about these patterns I recommend the book „Language Implementation Patterns“ from Terence Parr, the inventor of &lt;a href=&quot;http://www.antlr.org/&quot;&gt;ANTLR&lt;/a&gt;.) I also extended the lexer that way that it tracks the actual line and column of the scanned token for better error reporting on syntactic errors. This position information is part of the scanned token to improve the error reporting on semantic errors in the parser. You can find the code, of course, on &lt;a href=&quot;https://github.com/Weltraumschaf/ebnf&quot;&gt;GitHub&lt;/a&gt;. It offers you a class library for rendering EBNF grammars to GIF, JPG, PNG and XML and also a command line tool.&lt;/p&gt;

</description>
      <pubDate>Sun, 02 Oct 2011 00:00:00 +0200</pubDate>
      <dc:date>2011-10-02T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>NinjaUI jQuery UI library</title>
      <link>http://uberblog.local/posts/ninjaui-jquery-ui-library.html</link>
      <description>&lt;h2 id=&quot;ninjaui-jquery-ui-library&quot;&gt;NinjaUI jQuery UI library&lt;/h2&gt;

&lt;p&gt;Just playing around with &lt;a href=&quot;http://ninjaui.com/&quot;&gt;NinjaUI&lt;/a&gt; for a private project. It’s a nice stylish UI plugin for &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;. It’s not that large and complex than &lt;a href=&quot;http://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt;. It has less feature and options but in my opinion the better UI design. One of the unique features are the symbols realized with webfonts. Take a look at it, but beware it’s still beta.&lt;/p&gt;

</description>
      <pubDate>Sun, 17 Jul 2011 00:00:00 +0200</pubDate>
      <dc:date>2011-07-17T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>What causes E_STRICT errors in PHP</title>
      <link>http://uberblog.local/posts/what-causes-e-strict-errors-in-php.html</link>
      <description>&lt;h2 id=&quot;what-causes-estrict-errors-in-php&quot;&gt;What causes E_STRICT errors in PHP&lt;/h2&gt;

&lt;p&gt;Some months ago this question came up on my work. We asked our self what kind of errors causes an &lt;em&gt;E_STRICT&lt;/em&gt; error. The naive approach was to search the &lt;a href=&quot;http://php.net/&quot;&gt;php.net&lt;/a&gt;. But I didn’t find anything about that. Yes there is some information what number &lt;em&gt;E_STRICT&lt;/em&gt; has and that it causes errors if you don’t satisfy the strict standards and it’s important to be future compatible. But why? And what?&lt;/p&gt;

&lt;p&gt;Then I thought: Ok, to implement this feature (&lt;em&gt;E_STRICT&lt;/em&gt; standard) they needed a list for what they will throw an &lt;em&gt;E_STRICT&lt;/em&gt; error. I asked Google. What i found was not really helpful. Only a not exhaustive list on &lt;a href=&quot;http://pear.php.net/&quot;&gt;pear.php.net&lt;/a&gt;. I wonder how they can implement something such &lt;em&gt;E_STRICT&lt;/em&gt;, if they don’t have a list for that. Are they still hacking on without thinking about what to do?&lt;/p&gt;

&lt;p&gt;So I gathered the sparely information from the web and started to grep the PHP source code. So I can present a hopefully exhaustive list what causes &lt;em&gt;E_STRICT&lt;/em&gt; errors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;when static methods are declared as abstract&lt;/li&gt;
  &lt;li&gt;when non-static methods are called static&lt;/li&gt;
  &lt;li&gt;when a static property is accessed dynamically&lt;/li&gt;
  &lt;li&gt;when assigning new with reference&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;$foo =&amp;amp; new Foo();&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if you use &lt;code&gt;is_a()&lt;/code&gt; instead of &lt;code&gt;instanceof&lt;/code&gt; (in 5.2, in 5.3 undeprecated&amp;hellip;)&lt;/li&gt;
  &lt;li&gt;if you use var instead of &lt;code&gt;private/protected/public&lt;/code&gt; for class properties&lt;/li&gt;
  &lt;li&gt;if method declaration/signature of overridden methods differ&lt;/li&gt;
  &lt;li&gt;if you declare both the PHP4 and PHP5 constructor in a class&lt;/li&gt;
  &lt;li&gt;if you use “Automagic Objects”&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;$notInitializedYet-&amp;gt;foo = 'bar';&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if you assign function/method return values as reference&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;$foo =&amp;amp; bar();&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if you pass function/method return values as reference to a function/method&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;foo(bar()); //if function foo(&amp;amp;$aReference { &amp;hellip; }&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if resources are casted implicit to an integer&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;$row[$query_id] = mysql_fetch_array($query_id);
// if get_type($query_id) == 'resource'&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;if &lt;code&gt;mktime()&lt;/code&gt; is called without parameter. You should use &lt;code&gt;time()&lt;/code&gt; instead&lt;/li&gt;
  &lt;li&gt;if you call &lt;code&gt;mysqli_next_result()/mysqli::next_result()&lt;/code&gt; although there are no further results. You should test with &lt;code&gt;mysqli_more_results()/mysqli::more_results()&lt;/code&gt; before&lt;/li&gt;
  &lt;li&gt;and last but not least: If you don’t set a default timezone (neither in Code nor in php.ini)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <pubDate>Sat, 16 Jul 2011 00:00:00 +0200</pubDate>
      <dc:date>2011-07-16T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Launched Website for a Video Cutter</title>
      <link>http://uberblog.local/posts/launched-website-for-a-video-cutter.html</link>
      <description>&lt;h2 id=&quot;launched-website-for-a-video-cutter&quot;&gt;Launched Website for a Video Cutter&lt;/h2&gt;

&lt;p&gt;Some days ago I launched a new &lt;a href=&quot;http://www.lugagne.de/&quot;&gt;website&lt;/a&gt;. It’s the portfolio of my former neighbor. He’s a talented digital video cutter allways searching for new interesting projects to work on near Stuttgart in Germany. For this website I used first time the &lt;a href=&quot;http://sublimevideo.net/&quot;&gt;Sublime&lt;/a&gt; video player. Very nice tool. Easy to integrate and with powerfull JavaScript API. The player supports HTML5 video tag but also provides a Flash fallback for browser which did not support HTML5 or a propper codec.&lt;/p&gt;

</description>
      <pubDate>Sat, 23 Apr 2011 00:00:00 +0200</pubDate>
      <dc:date>2011-04-23T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Darcs in Hudson/Jenkins CI</title>
      <link>http://uberblog.local/posts/darcs-in-hudson-jenkins-ci.html</link>
      <description>&lt;h2 id=&quot;darcs-in-hudsonjenkins-ci&quot;&gt;Darcs in Hudson/Jenkins CI&lt;/h2&gt;

&lt;p&gt;At &lt;a href=&quot;http://blog.kwick.de/uber-uns/&quot;&gt;work&lt;/a&gt; we’re using heavily the &lt;a href=&quot;http://en.wikipedia.org/wiki/Distributed_Version_Control_System&quot;&gt;DVCS&lt;/a&gt; &lt;a href=&quot;http://darcs.net/&quot;&gt;Darcs&lt;/a&gt;. Beyond dispute Darcs is in my opinion a good and suitable workhorse. Ok, it’s not that hip like Git is. But the biggest drawback is the lack of integration in other tools like IDEs, issuetrackers, build tools etc. There is also no SCM integration for Hudson/&lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; continious integration server, which we’re using at work, &lt;a href=&quot;http://stackoverflow.com/questions/1468760/is-there-a-darcs-plugin-for-hudson&quot;&gt;too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Long time I were complaining about this bad integration like others, too. Now I considered to give the community something back and decided to write a &lt;a href=&quot;https://github.com/Weltraumschaf/darcs-plugin&quot;&gt;Darcs SCM plugin&lt;/a&gt; for the Jenkins CI.&lt;/p&gt;

&lt;p&gt;The plugin is in a stage it still works and I would call it an alpha release (0.3.1). You can watch the project status &lt;a href=&quot;http://weltraumschaf.github.com/darcs-plugin/&quot;&gt;here&lt;/a&gt;. It implements the base functionality for checking out a Darcs repository and tracks the patches as build changesets. Also it integrates &lt;a href=&quot;http://blitiri.com.ar/p/darcsweb/&quot;&gt;Darcsweb&lt;/a&gt; and &lt;a href=&quot;http://darcsden.com/&quot;&gt;Darcsden&lt;/a&gt; for code browsing.&lt;/p&gt;

&lt;p&gt;Todos for further versions are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;write more unittests
    &lt;ul&gt;
      &lt;li&gt;DarcsSaxHandler/DarcsChangelogParser tests&lt;/li&gt;
      &lt;li&gt;BrowserChooser&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iput validation for code browsers URL&lt;/li&gt;
  &lt;li&gt;implement polling support&lt;/li&gt;
  &lt;li&gt;use org.jenkinsci.plugins as namespace&lt;/li&gt;
  &lt;li&gt;write more javadoc&lt;/li&gt;
  &lt;li&gt;ipmroving the changeset index view&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to join the project you can fork me on &lt;a href=&quot;https://github.com/Weltraumschaf/darcs-plugin&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many thanks to &lt;a href=&quot;https://github.com/rpetti&quot;&gt;Rob Petti&lt;/a&gt;, &lt;a href=&quot;https://github.com/jieryn&quot;&gt;Jesse Farinacci&lt;/a&gt;, the developers of the &lt;a href=&quot;https://github.com/jenkinsci/bazaar-plugin&quot;&gt;Bazaar&lt;/a&gt;, &lt;a href=&quot;https://github.com/jenkinsci/tfs-plugin&quot;&gt;TFS&lt;/a&gt;, &lt;a href=&quot;https://github.com/jenkinsci/git-plugin&quot;&gt;Git&lt;/a&gt;, &lt;a href=&quot;https://github.com/jenkinsci/subversion-plugin&quot;&gt;SVN&lt;/a&gt; and &lt;a href=&quot;https://github.com/jenkinsci/perforce-plugin&quot;&gt;Perforce&lt;/a&gt; plugins. And last but not least all in #darcs and #jenkins IRC channels on freenode which helped me with good advices developing this plugin.&lt;/p&gt;

</description>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0100</pubDate>
      <dc:date>2011-02-15T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Good Thinking – Good Products</title>
      <link>http://uberblog.local/posts/good-thinking-good-products.html</link>
      <description>&lt;h2 id=&quot;good-thinking--good-products&quot;&gt;Good Thinking – Good Products&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Toyota Way has two main pillars: continuous improvement and respect for people. Respect is necessary to work with people. By “people” we mean employees, supply partners, and customers. … We don’t mean just the end customer; on the assembly line the person at the next workstation is also your customer. That leads to teamwork. If you adopt that principle, you’ll also keep analyzing what you do in order to see if you’re doing things perfectly, so you’re not troubling your customer. That nurtures your ability to identify problems, and if you closely observe things, it will lead to kaizen – continuous improvement. The root of the Toyota Way is to be dissatisfied with the status quo; you have to ask constantly, “Why are we doing this?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Toyota CEO Katsuaki Watanabe (from “Scaling Lean and Agile Development”)&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 09 Apr 2010 00:00:00 +0200</pubDate>
      <dc:date>2010-04-09T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Unit test Your Cocoa Application with GHUnit</title>
      <link>http://uberblog.local/posts/unit-test-your-cocoa-application-with-ghunit.html</link>
      <description>&lt;h2 id=&quot;unit-test-your-cocoa-application-with-ghunit&quot;&gt;Unit test Your Cocoa Application with GHUnit&lt;/h2&gt;

&lt;p&gt;In the last years I have good experiences with &lt;a href=&quot;http://en.wikipedia.org/wiki/Unit_testing&quot;&gt;Unit testing&lt;/a&gt;. It gives you more safety that your software meets your behavioral requirements. So I searched for some frameworks to make tests for my Cocoa application. I found &lt;a href=&quot;http://rel.me/2009/02/21/unit-testing-for-mac-os-x-and-iphone-ghunit/&quot;&gt;GHUnit&lt;/a&gt;. A preoject started by &lt;a href=&quot;http://rel.me/&quot;&gt;Gabriel Handford&lt;/a&gt;. The source is available on &lt;a href=&quot;http://github.com/gabriel/gh-unit&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Sun, 21 Mar 2010 00:00:00 +0100</pubDate>
      <dc:date>2010-03-21T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Recomened Books for learning Objective-C and Cocoa</title>
      <link>http://uberblog.local/posts/recomened-books-for-learning-objective-c-and-cocoa.html</link>
      <description>&lt;h2 id=&quot;recomened-books-for-learning-objective-c-and-cocoa&quot;&gt;Recomened Books for learning Objective-C and Cocoa&lt;/h2&gt;

&lt;p&gt;Since some time I keep busy with learning &lt;a href=&quot;http://en.wikipedia.org/wiki/Objective-c&quot;&gt;Objective-C&lt;/a&gt; to program on my Mac. There are several good resources in the web. But I like to read books. So I find a very good book to learn the concepts ob Objective-C. It&amp;rsquo;s &lt;a href=&quot;http://www.amazon.de/Programming-Objective-C-2-0-Developers-Library/dp/0321566157/ref=sr_1_fkmr1_1?ie=UTF8&amp;amp;qid=1269101408&amp;amp;sr=8-1-fkmr1&quot;&gt;Programming in Objective-C&lt;/a&gt; from Stephen G. Kocham. If you go further with programming on a Mac you will reach something called &lt;a href=&quot;http://en.wikipedia.org/wiki/Cocoa_(API)&quot;&gt;Cocoa&lt;/a&gt; (pronounced [ko:ko:]). It&amp;rsquo;s some thing like a rich framework (in deed there are several) which makes it easy to you to program nice (desktop) applications. This is the hardest part because Cocoa covers a very large and powerful API. I found two books dealing with this subject: &lt;a href=&quot;http://www.amazon.de/Cocoa-Programming-Mac-OS-X/dp/0321503619/ref=sr_1_1?ie=UTF8&amp;amp;s=books-intl-de&amp;amp;qid=1269101808&amp;amp;sr=8-1&quot;&gt;Cocoa Programming for Mac OS X&lt;/a&gt; from Aaron Hillegass and &lt;a href=&quot;http://www.amazon.de/Cocoa-Design-Patterns-Developers-Library/dp/0321535022/ref=sr_1_1?ie=UTF8&amp;amp;s=books-intl-de&amp;amp;qid=1269101773&amp;amp;sr=8-1&quot;&gt;Cocoa Design Patterns&lt;/a&gt; from Erik M. Buck and Donald A. Yacktman.&lt;/p&gt;

</description>
      <pubDate>Sat, 20 Mar 2010 00:00:00 +0100</pubDate>
      <dc:date>2010-03-20T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Nice Objective-C 2.0 Tutorial</title>
      <link>http://uberblog.local/posts/nice-objective-c-2-0-tutorial.html</link>
      <description>&lt;h2 id=&quot;nice-objective-c-20-tutorial&quot;&gt;Nice Objective-C 2.0 Tutorial&lt;/h2&gt;

&lt;p&gt;Scott Stevenson posted a nice tutorial about new Features in Objective-C 2.0 in Mac OS: &lt;a href=&quot;http://theocacao.com/document.page/510&quot;&gt;A Quick Objective-C 2.0 Tutorial&lt;/a&gt; and &lt;a href=&quot;http://theocacao.com/document.page/516&quot;&gt;A Quick Objective-C 2.0 Tutorial: Part II&lt;/a&gt;.&lt;/p&gt;

</description>
      <pubDate>Fri, 19 Mar 2010 00:00:00 +0100</pubDate>
      <dc:date>2010-03-19T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Failure Modes in Scrum</title>
      <link>http://uberblog.local/posts/failure-modes-in-scrum.html</link>
      <description>&lt;h2 id=&quot;failure-modes-in-scrum&quot;&gt;Failure Modes in Scrum&lt;/h2&gt;

&lt;p&gt;Nice &lt;a href=&quot;http://agile.dzone.com/videos/failure-modes-scrum&quot;&gt;speak&lt;/a&gt; from Jens Østergaard about failure modes in Scrum. What failures can happen and how to fix them.&lt;/p&gt;

</description>
      <pubDate>Thu, 18 Mar 2010 00:00:00 +0100</pubDate>
      <dc:date>2010-03-18T00:00:00+01:00</dc:date>
    </item>
  </channel>
</rss>